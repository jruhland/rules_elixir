defmodule Mix.Tasks.Autodeps do
  use Mix.Task
  alias RulesElixir.Tools.{Common, Bazel}

  @moduledoc """
  Generate BUILD files for the mix project in the current directory
  """
  @switches [prefix: :string,
	     echo: :boolean,
	     dry_run: :boolean,
             overwrite: :boolean,
	    ]

  # put our autogenerated rule in a separate file so you can build additional stuff
  @auto_build_file "BUILD.autogenerated.bzl"
  @auto_macro "autogenerated_targets"
  @build_file_boilerplate """
  load(":#{@auto_build_file}", "#{@auto_macro}")
  #{@auto_macro}()
  """
  @auto_prolog """
  load("//impl:defs.bzl", "elixir_library", "elixir_script")
  """

  @impl true
  def run(args) do
    options = parse_args(args)
    Mix.Project.get!()
    :ets.new(:found_deps, [:set, :public, :named_table, {:write_concurrency, true}])
    :ets.new(:module_location, [:set, :public, :named_table, {:write_concurrency, true}])
    {:ok, mixfile} = Common.active_mixfile()
    Process.put(:workspace_root, System.get_env("BUILD_WORKSPACE_DIRECTORY"))
    Mix.Task.run("autodeps.recursive")
    generate_build_files(Path.dirname(mixfile), options)
  end

  defp parse_args(args) do
    {parsed, positional, invalid} =  OptionParser.parse(args, strict: @switches)
    if Enum.empty?(positional) do
      IO.puts("warning: positional args unsupported: #{inspect(positional)}")
    end
    if not Enum.empty?(invalid) do
      IO.puts("warning: invalid arguments: #{inspect(invalid)}")
    end
    parsed
  end

  defp generate_build_files(project_root, opts) do
    :ets.match(:found_deps, :"$1")
    |> Enum.map(fn [{file, compile, runtime}] ->
      {Path.dirname(Path.relative_to(file, project_root)),
       %Bazel.Rule{rule: "elixir_library",
                   params: elixir_library_attrs(file, compile, runtime)}}
    end)
    |> Enum.group_by(fn {dir, _} -> dir end, fn {_, attrs} -> attrs end)
    |> Enum.map(fn {dir, rules} ->
      rules
      |> Enum.sort_by(fn rule -> Keyword.get(rule.params, :name) end)
      |> generated_build_file
      |> Bazel.to_iodata
      |> output_file("#{dir}/#{@auto_build_file}", Keyword.put(opts, :overwrite, true))

      output_file(@build_file_boilerplate, "#{dir}/BUILD", opts)
    end)
  end

  defp output_file(contents, filename, opts) do
    write? = Keyword.get(opts, :overwrite, false) or not File.exists?(filename)
    if not Keyword.get(opts, :dry_run, false) do
      if write?, do: File.write!(filename, contents)
    end
    if write? and Keyword.get(opts, :echo, false) do
      IO.puts(["### ", filename, ":\n", contents, "\n"])
    end
  end

  defp elixir_library_attrs(file, compile_deps, runtime_deps) do
    basename = Path.basename(file)
    [name: Path.rootname(basename),
     srcs: [basename],
     compile_deps: modules_to_targets(file, compile_deps),
     runtime_deps: modules_to_targets(file, runtime_deps),
     visibility: ["//visibility:public"]]
  end

  defp generated_build_file(body) do
    [@auto_prolog,
     %Bazel.Def{name: @auto_macro, body: body}]
  end
      
  defp modules_to_targets(file, modules) do
    modules
    |> Enum.flat_map(fn module ->
      case :ets.lookup(:module_location, module) do
        [{_, dep_file}] when dep_file != file -> [dep_file]
        _ -> []
      end
    end)
    |> Enum.uniq
    |> Enum.map(fn dep_file ->
      if Path.dirname(dep_file) == Path.dirname(file) do
	# sort sibling deps first
	{0, sibling_target(dep_file)}
      else
	{1, qualified_target(dep_file)}
      end
    end)
    |> Enum.sort
    |> Enum.map(fn {_sort, target} -> target end)
  end

  defp sibling_target(file) do
    ":" <> Path.rootname(Path.basename(file))
  end

  defp qualified_target(file) do
    path_to_target(Path.relative_to(file, Process.get(:workspace_root)))
  end

  defp path_to_target(file) do
    dir = Path.dirname(file)
    file = Path.rootname(Path.basename(file))

    "//" <> Enum.join(Path.split(dir), "/") <> ":" <> file
  end
end

